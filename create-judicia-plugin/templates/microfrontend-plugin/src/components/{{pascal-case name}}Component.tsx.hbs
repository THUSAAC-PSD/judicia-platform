import React, { useState, useEffect } from 'react';
import { useJudiciaSDK } from '@judicia/frontend-sdk';

interface {{pascal-case name}}ComponentProps {
  // Add your component props here
}

/**
 * Main {{pascal-case name}} Component
 * This component implements the core functionality of your plugin
 */
const {{pascal-case name}}Component: React.FC<{{pascal-case name}}ComponentProps> = () => {
  const sdk = useJudiciaSDK();
  const [loading, setLoading] = useState(false);
  const [data, setData] = useState<any>(null);
  const [error, setError] = useState<string | null>(null);

  // Example: Load data when component mounts
  useEffect(() => {
    const loadData = async () => {
      try {
        setLoading(true);
        setError(null);
        
        // Example API call using the SDK
        const response = await sdk.api.get('/{{kebab-case name}}/data');
        setData(response.data);
      } catch (err) {
        setError(err instanceof Error ? err.message : 'An error occurred');
      } finally {
        setLoading(false);
      }
    };

    loadData();
  }, [sdk]);

  const handleAction = async () => {
    try {
      setLoading(true);
      
      // Example: Emit a custom event
      sdk.events.emit('{{camel-case name}}.action', {
        timestamp: new Date(),
        user: sdk.user?.id,
      });
      
      // Example: Show a notification
      sdk.notifications.show({
        type: 'success',
        title: 'Action completed',
        message: '{{pascal-case name}} action was successful',
      });
      
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Action failed');
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center p-8">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
        <span className="ml-2">Loading...</span>
      </div>
    );
  }

  if (error) {
    return (
      <div className="bg-red-50 border border-red-200 rounded-lg p-4">
        <h3 className="text-red-800 font-medium">Error</h3>
        <p className="text-red-600 text-sm mt-1">{error}</p>
        <button
          onClick={() => window.location.reload()}
          className="mt-2 px-3 py-1 bg-red-100 text-red-800 rounded text-sm hover:bg-red-200"
        >
          Retry
        </button>
      </div>
    );
  }

  return (
    <div className="{{kebab-case name}}-component">
      <div className="bg-white rounded-lg shadow-sm border p-6">
        <h2 className="text-2xl font-bold mb-4">{{pascal-case name}}</h2>
        <p className="text-gray-600 mb-4">{{description}}</p>
        
        {data && (
          <div className="mb-4">
            <h3 className="font-medium mb-2">Data:</h3>
            <pre className="bg-gray-50 p-3 rounded text-sm overflow-auto">
              {JSON.stringify(data, null, 2)}
            </pre>
          </div>
        )}
        
        <div className="flex gap-2">
          <button
            onClick={handleAction}
            disabled={loading}
            className="px-4 py-2 bg-primary text-white rounded hover:bg-primary/90 disabled:opacity-50"
          >
            Perform Action
          </button>
          
          <button
            onClick={() => sdk.events.emit('{{camel-case name}}.refresh', {})}
            className="px-4 py-2 border border-gray-300 rounded hover:bg-gray-50"
          >
            Refresh
          </button>
        </div>
      </div>
    </div>
  );
};

export default {{pascal-case name}}Component;